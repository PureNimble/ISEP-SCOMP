1) Padrões usados: Sincronização entre processos (por ocorrência de eventos).

2)
BEGIN
    DEFINE NUMBER_OF_CHILDREN as 2
    DEFINE NUMBER_OF_EXECUTIONS as 15

    DEFINE main()

        DEFINE status, i
        DEFINE pidList[NUMBER_OF_CHILDREN]
        DEFINE semName[50]
        DEFINE sem[NUMBER_OF_CHILDREN]

        FOR i = 0 TO NUMBER_OF_CHILDREN
            SNPRINTF semName, sizeof(semName), "sema%d", i
            sem[i] = sem_open(semName, O_CREAT | O_EXCL, 0644, 0)
            IF sem[i] == SEM_FAILED THEN
                PRINT "Error creating/opening semaphore"
                EXIT -1
            END
        END

        FOR i = 0 TO NUMBER_OF_CHILDREN
            pidList[i] = fork()

            IF pidList[i] < 0 THEN
                PRINT "Error creating process"
                EXIT -1
            ELSE IF pidList[i] == 0 THEN
                DEFINE j
                FOR j = 0 TO NUMBER_OF_EXECUTIONS
                    IF i == 0 THEN
                        PRINT "1st child"
                        SIGNAL sem[0]
                    ELSE
                        WAIT sem[1]
                        PRINT "2nd child"
                    END
                    SLEEP 1
                END

                EXIT 0
            END
        END

        FOR i = 0 TO NUMBER_OF_EXECUTIONS
            WAIT sem[0]
            PRINT "Father"
            SIGNAL sem[1]
        END

        FOR i = 0 TO NUMBER_OF_CHILDREN
            waitpid(pidList[i], &status, 0)
        END

        FOR i = 0 TO NUMBER_OF_CHILDREN
            IF sem_close(sem[i]) < 0 THEN
                PRINT "Error closing semaphore"
                EXIT -1
            END

            snprintf(semName, sizeof(semName), "sema%d", i)
            IF sem_unlink(semName) < 0 THEN
                PRINT "Error unlinking semaphore"
                EXIT -1
            END
        END

        RETURN 0
    END
END