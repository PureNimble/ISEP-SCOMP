BEGIN
    typedef struct {
        int barrier;
    } sharedValues;

    DEFINE DATA_SIZE as sizeof(sharedValues)
    DEFINE FILE_NAME as "/shmEx07b"
    DEFINE NUMBER_OF_PROCESSES as 6
    DEFINE NUMBER_OF_CHILDREN as 5

    DEFINE buy_beer(n)
        PRINT "P%d a comprar cerveja", n
    END

    DEFINE buy_chips(n)
        PRINT "P%d a comprar batatas", n
    END

    DEFINE eat_and_drink()
        PRINT "P1, P2, P3, P4, P5 e P6 a comer e a beber"
    END

    DEFINE main()
        DEFINE fd, status, random, i
        DEFINE pidList[NUMBER_OF_CHILDREN]
        DEFINE t as time_t
        DEFINE semMem, semBar as sem_t*
        fd = shm_open(FILE_NAME, O_CREAT|O_EXCL|O_RDWR, S_IRUSR|S_IWUSR)
        IF fd < 0
            PRINT "Error creating shared memory"
            EXIT -1
        END

        IF ftruncate(fd, DATA_SIZE) < 0
            PRINT "Error allocating space in memory"
            EXIT -1
        END

        sharedValues* shared_data = (sharedValues*) mmap(NULL, DATA_SIZE, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0)
        shared_data->barrier = 0

        semMem = sem_open("semaMemory", O_CREAT | O_EXCL, 0644, 1)
        semBar = sem_open("semaBarrier", O_CREAT | O_EXCL, 0644, 0)
        IF semMem == SEM_FAILED OR semBar == SEM_FAILED
            PRINT "Error creating/opening semaphore"
            EXIT -1
        END

        FOR i = 0 TO NUMBER_OF_CHILDREN
            pidList[i] = fork()
            IF pidList[i] < 0
                PRINT "Error creating process"
                EXIT -1
            ELSE IF pidList[i] == 0
                srand ((unsigned) time(&t) * getpid())
                random = (rand() % 5) + 1
                sleep(random)
                IF i > 0
                    DEFINE prob
                    prob = (rand() % 10) + 1
                    IF prob > 5
                        buy_beer(i+2)
                    ELSE
                        buy_chips(i+2)
                    END
                ELSE
                    buy_beer(i+2)
                END
                sem_wait(semMem)
                shared_data->barrier++
                sem_post(semMem)
                IF shared_data->barrier == NUMBER_OF_PROCESSES
                    sem_post(semBar)
                END
                sem_wait(semBar)
                sem_post(semBar)
                eat_and_drink()

                IF munmap(shared_data, DATA_SIZE) < 0
                    PRINT "Error removing mapping"
                    EXIT -1
                END

                IF close(fd) < 0
                    PRINT "Error closing file descriptor"
                    EXIT -1
                END

                EXIT 0
            END
        END

        srand ((unsigned) time(&t) * getpid())
        random = (rand() % 5) + 1
        sleep(random)
        buy_chips(1)
        sem_wait(semMem)
        shared_data->barrier++
        sem_post(semMem)
        IF shared_data->barrier == NUMBER_OF_PROCESSES
            sem_post(semBar)
        END
        sem_wait(semBar)
        sem_post(semBar)
        eat_and_drink()
        FOR i = 0 TO NUMBER_OF_CHILDREN
            waitpid(pidList[i], &status, 0)
        END
        PRINT "\n"

        IF sem_close(semMem) < 0 OR sem_close(semBar) < 0
            PRINT "Error closing semaphore"
            EXIT -1
        END
        IF sem_unlink("semaMemory") < 0 OR sem_unlink("semaBarrier") < 0
            PRINT "Error unlinking semaphore"
            EXIT -1
        END

        IF munmap(shared_data, DATA_SIZE) < 0
            PRINT "Error removing mapping"
            EXIT -1
        END

        IF close(fd) < 0
            PRINT "Error closing file descriptor"
            EXIT -1
        END

        IF shm_unlink(FILE_NAME) < 0
            PRINT "Error removing the file!"
            EXIT -1
        END

        RETURN 0
    END
END
