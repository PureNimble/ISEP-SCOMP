1) Padrões usados: Variação do problema dos leitores e escritores (sincronização por exclusão mútua).

2)
BEGIN
    DEFINE main()
        DEFINE opt

        fd = shm_open(FILE_NAME, O_CREAT|O_EXCL|O_RDWR, S_IRUSR|S_IWUSR)
        IF fd < 0 THEN
            PRINT "Error creating shared memory"
            EXIT -1
        END

        IF ftruncate(fd, DATA_SIZE) < 0 THEN
            PRINT "Error allocating space in memory"
            EXIT -1
        END
        
        sharedValues *shared_data = (sharedValues*) mmap(NULL, DATA_SIZE, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0)
        shared_data -> run = 3
        shared_data -> readCount = 0
        shared_data -> writeCount = 0
        shared_data -> index = 0

        sem1 = sem_open("sem1", O_CREAT | O_EXCL, 0644, 1)
        sem2 = sem_open("sem2", O_CREAT | O_EXCL, 0644, 1)
        sem3 = sem_open("sem3", O_CREAT | O_EXCL, 0644, 1)
        semRead = sem_open("semaRead", O_CREAT | O_EXCL, 0644, 1)
        semWrite = sem_open("semaWrite", O_CREAT | O_EXCL, 0644, 1)

        IF sem1 == SEM_FAILED OR sem2 == SEM_FAILED OR sem3 == SEM_FAILED OR semRead == SEM_FAILED OR semWrite == SEM_FAILED THEN
            PRINT "Error creating/opening semaphore"
            EXIT -1
        END

        DO
            WAIT sem2
            shared_data -> writeCount++
            IF shared_data -> writeCount == 1 THEN
                WAIT semRead
            END
            SIGNAL sem2

            WAIT semWrite

            PRINT "------Insert------\nNúmero: "
            READ shared_data -> data[shared_data -> index].clientNum
            PRINT "Nome: "
            READ shared_data -> data[shared_data -> index].clientName
            PRINT "Endereço: "
            READ shared_data -> data[shared_data -> index].clientAddress
            PRINT "------------------\n"
            shared_data -> index++
            PRINT "A inserir os dados no sistema...\n"
            SLEEP 2 seconds
            PRINT "Sucesso\n"

            SIGNAL semWrite

            WAIT sem2
            shared_data -> writeCount--
            IF shared_data -> writeCount == 0 THEN
                SIGNAL semRead
            END
            SIGNAL sem2

            DO
                PRINT "Deseja adicionar mais algum cliente?\n"
                READ opt
            WHILE opt < 0 OR opt > 1
        WHILE opt is equal to 1 AND shared_data -> index < LIMIT
        shared_data -> run--

        IF shared_data -> run == 0 THEN
            IF sem_close(sem1) < 0 OR sem_close(sem2) < 0 OR sem_close(sem3) < 0 OR sem_close(semRead) < 0 OR sem_close(semWrite) < 0 THEN
                PRINT "Error closing semaphore"
                EXIT -1
            END

            IF munmap(shared_data, DATA_SIZE) < 0 THEN
                PRINT "Error removing mapping"
                EXIT -1
            END

            IF close(fd) < 0 THEN
                PRINT "Error closing file descriptor"
                EXIT -1
            END
            IF sem_unlink("sem1") < 0 OR sem_unlink("sem2") < 0 OR sem_unlink("sem3") < 0 OR sem_unlink("semaRead") < 0 OR sem_unlink("semaWrite") < 0 THEN
                PRINT "Error unlinking semaphore"
                EXIT -1
            END

            IF shm_unlink(FILE_NAME) < 0 THEN
                PRINT "Error removing the file"
                EXIT -1
            END
        END

        RETURN 0
    END
END