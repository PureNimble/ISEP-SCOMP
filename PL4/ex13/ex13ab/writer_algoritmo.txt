1) Padrões usados: Variação do problema dos leitores e escritores (exclusão mútua).

2)
BEGIN
    DEFINE main()
        DEFINE i, status
        DEFINE pidList[NUMBER_OF_CHILDREN]
        DEFINE timeinfo, tv

        fd = shm_open(FILE_NAME, O_CREAT|O_EXCL|O_RDWR, S_IRUSR|S_IWUSR)
        IF fd < 0 THEN
            PRINT "Erro ao criar memoria partilhada"
            EXIT -1
        END

        IF ftruncate(fd, DATA_SIZE) < 0 THEN
            PRINT "Erro ao alocar espaço na memória"
            EXIT -1
        END

        sharedValues *shared_data = (sharedValues*) mmap(NULL, DATA_SIZE, PROT_READ|PROT_WRITE, MAP_SHARED, fd, 0)
        shared_data -> readCount = 0
        shared_data -> writeCount = 0

        semWriter = sem_open("semaWriter", O_CREAT | O_EXCL, 0644, 1)
        sem1 = sem_open("sema1", O_CREAT | O_EXCL, 0644, 1)


        IF semWriter == NULL OR sem1 == NULL THEN
            PRINT "Erro no criar/abrir semaforo"
            EXIT -1
        END

        FOR i = 0 TO NUMBER_OF_CHILDREN - 1 DO
            pidList[i] = fork()
            IF pidList[i] < 0 THEN
                PRINT "Erro ao criar o processo"
                EXIT -1
            ELSE IF pidList[i] == 0 THEN
                STRING buffer[20]
                INT random
                pid_t pid = getpid()
                time_t curtime, t

                WAIT(semWriter)

                shared_data -> writeCount++

                shared_data -> pid = pid

                gettimeofday(&tv, NULL)
                curtime = tv.tv_sec
                timeinfo = localtime(&curtime)
                strftime(buffer, sizeof(buffer), "%H:%M:%S", timeinfo)
                sprintf(shared_data -> currentTime, "%s.%03ld", buffer, tv.tv_usec / 1000)

                PRINT "Writer: Número de escritores: " + shared_data -> writeCount
                FLUSH(stdout)
                PRINT "Writer: Número de leitores: " + shared_data -> readCount
                FLUSH(stdout)

                shared_data -> writeCount--

                SIGNAL(semWriter)

                EXIT 0
            END
        END

        FOR i = 0 TO NUMBER_OF_CHILDREN - 1 DO
            waitpid(pidList[i], &status, 0)
        END

        IF CLOSE_SEMAPHORE(semWriter) < 0 OR CLOSE_SEMAPHORE(sem1) < 0 THEN
            PRINT "Erro ao fechar semaforo\n"
            EXIT -1
        END

        IF munmap(shared_data, DATA_SIZE) < 0 THEN
            PRINT "Erro ao remover mapping"
            EXIT -1
        END

        IF close(fd) < 0 THEN
            PRINT "Erro ao fechar file descriptor"
            EXIT -1
        END
        RETURN 0
    END
END
